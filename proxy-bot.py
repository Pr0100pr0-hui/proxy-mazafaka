import logging
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN, CREATOR_ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
pending_payments = {}

PROXY_PRICES = {
    "usa": 149,      # –°–®–ê
    "russia": 99,    # –†–æ—Å—Å–∏—è
    "turkey": 199,    # –¢—É—Ä—Ü–∏—è
    "brazil": 199,    # –ë—Ä–∞–∑–∏–ª–∏—è
    "india": 249,     # –ò–Ω–¥–∏—è
    "germany": 299,   # –ì–µ—Ä–º–∞–Ω–∏—è
    "italy": 299,     # –ò—Ç–∞–ª–∏—è
    "poland": 249,    # –ü–æ–ª—å—à–∞
    "japan": 299      # –Ø–ø–æ–Ω–∏—è
}

COUNTRY_NAMES = {
    "usa": "üá∫üá∏ –°–®–ê",
    "russia": "üá∑üá∫ –†–æ—Å—Å–∏—è",
    "turkey": "üáπüá∑ –¢—É—Ä—Ü–∏—è",
    "brazil": "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è",
    "india": "üáÆüá≥ –ò–Ω–¥–∏—è",
    "germany": "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è",
    "italy": "üáÆüáπ –ò—Ç–∞–ª–∏—è",
    "poland": "üáµüá± –ü–æ–ª—å—à–∞",
    "japan": "üáØüáµ –Ø–ø–æ–Ω–∏—è"
}

def generate_proxy(country):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ —Å IP –≤ —Ñ–æ—Ä–º–∞—Ç–µ x.x.x.x"""
    ip = ".".join(str(random.randint(0, 255)) for _ in range(4))
    
    return {
        "ip": ip,
        "port": str(random.randint(1000, 9999)),
        "login": f"user_{random.randint(1000, 9999)}",
        "password": f"pass_{random.randint(10000, 99999)}"
    }

def create_country_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    buttons = [
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['usa']} ({PROXY_PRICES['usa']} —Ä—É–±)"),
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['russia']} ({PROXY_PRICES['russia']} —Ä—É–±)"),
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['turkey']} ({PROXY_PRICES['turkey']} —Ä—É–±)"),
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['brazil']} ({PROXY_PRICES['brazil']} —Ä—É–±)"),
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['india']} ({PROXY_PRICES['india']} —Ä—É–±)"),
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['germany']} ({PROXY_PRICES['germany']} —Ä—É–±)"),
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['italy']} ({PROXY_PRICES['italy']} —Ä—É–±)"),
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['poland']} ({PROXY_PRICES['poland']} —Ä—É–±)"),
        KeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ {COUNTRY_NAMES['japan']} ({PROXY_PRICES['japan']} —Ä—É–±)")
    ]
    
    markup.add(*buttons)
    return markup

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∫—Å–∏:",
        reply_markup=create_country_keyboard()
    )

@dp.message_handler(lambda message: message.text.startswith("–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏"))
async def buy_proxy(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç username"
    
    country = None
    price = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    for code, name in COUNTRY_NAMES.items():
        if name in message.text:
            country = code
            price = PROXY_PRICES[code]
            break
    
    if country:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        payment_id = f"pay_{random.randint(100000, 999999)}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        pending_payments[payment_id] = {
            "user_id": user_id,
            "username": username,
            "country": country,
            "price": price,
            "status": "waiting"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ {COUNTRY_NAMES[country]}:\n"
            f"–°—É–º–º–∞: {price} —Ä—É–±\n\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"–¢-–ë–ê–ù–ö: 2200 7005 0226 1372\n\n"
            f"–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –∏ –∏—Ö —Å—Ç—Ä–∞–Ω—ã.\n"
            f"–í–∞—à ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
        await bot.send_message(
            CREATOR_ID,
            f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä–æ–∫—Å–∏:\n"
            f"User ID: {user_id}\n"
            f"Username: @{username}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {COUNTRY_NAMES[country]}\n"
            f"–°—É–º–º–∞: {price} —Ä—É–±\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"confirm_{payment_id}"
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_{payment_id}"
                )
            )
        )

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_'))
async def confirm_payment(callback_query: types.CallbackQuery):
    payment_id = callback_query.data.split('_')[1]
    
    if payment_id in pending_payments:
        payment = pending_payments[payment_id]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
        proxy_data = generate_proxy(payment["country"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            payment["user_id"],
            f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
            f"–ü—Ä–æ–∫—Å–∏ –∏–∑ {COUNTRY_NAMES[payment['country']]}:\n"
            f"IP: {proxy_data['ip']}\n"
            f"–ü–æ—Ä—Ç: {proxy_data['port']}\n"
            f"–õ–æ–≥–∏–Ω: {proxy_data['login']}\n"
            f"–ü–∞—Ä–æ–ª—å: {proxy_data['password']}\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        await callback_query.message.edit_text(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n"
            f"User ID: {payment['user_id']}\n"
            f"Username: @{payment['username']}\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
            f"–í—ã–¥–∞–Ω—ã –ø—Ä–æ–∫—Å–∏: {proxy_data['ip']}:{proxy_data['port']}"
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        del pending_payments[payment_id]
        
        await callback_query.answer("–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
    else:
        await callback_query.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith('reject_'))
async def reject_payment(callback_query: types.CallbackQuery):
    payment_id = callback_query.data.split('_')[1]
    
    if payment_id in pending_payments:
        payment = pending_payments[payment_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            payment["user_id"],
            f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @creator_username"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        await callback_query.message.edit_text(
            f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω:\n"
            f"User ID: {payment['user_id']}\n"
            f"Username: @{payment['username']}\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        del pending_payments[payment_id]
        
        await callback_query.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    else:
        await callback_query.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id == CREATOR_ID:
        text = "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        text += f"–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
        
        if pending_payments:
            text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞—Ç–µ–∂–µ–π:\n"
            for payment_id, payment in list(pending_payments.items())[:5]:
                text += (f"ID: {payment_id}\n"
                        f"User: @{payment['username']}\n"
                        f"–°—Ç—Ä–∞–Ω–∞: {COUNTRY_NAMES[payment['country']]}\n"
                        f"–°—É–º–º–∞: {payment['price']} —Ä—É–±\n\n")
        
        await message.answer(text)
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
